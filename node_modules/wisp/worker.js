{
    var _ns_ = {
            id: 'wisp.worker',
            doc: 'Wisp program that reads wisp code from stdin and prints\n  compiled javascript code into stdout'
        };
    var fs = require('fs');
    var createReadStream = fs.createReadStream;
    var path = require('path');
    var basename = path.basename;
    var dirname = path.dirname;
    var join = path.join;
    var resolve = path.resolve;
    var module = require('module');
    var Module = module.Module;
    var wisp_string = require('./string');
    var split = wisp_string.split;
    var join = wisp_string.join;
    var upperCase = wisp_string.upperCase;
    var replace = wisp_string.replace;
    var wisp_sequence = require('./sequence');
    var first = wisp_sequence.first;
    var second = wisp_sequence.second;
    var last = wisp_sequence.last;
    var count = wisp_sequence.count;
    var reduce = wisp_sequence.reduce;
    var rest = wisp_sequence.rest;
    var conj = wisp_sequence.conj;
    var partition = wisp_sequence.partition;
    var assoc = wisp_sequence.assoc;
    var drop = wisp_sequence.drop;
    var isEmpty = wisp_sequence.isEmpty;
    var wisp_repl = require('./repl');
    var startRepl = wisp_repl.start;
    var wisp_engine_node = require('./engine/node');
    var wisp_runtime = require('./runtime');
    var str = wisp_runtime.str;
    var subs = wisp_runtime.subs;
    var isEqual = wisp_runtime.isEqual;
    var isNil = wisp_runtime.isNil;
    var wisp_ast = require('./ast');
    var prStr = wisp_ast.prStr;
    var name = wisp_ast.name;
    var wisp_compiler = require('./compiler');
    var compile = wisp_compiler.compile;
    var readForms = wisp_compiler.readForms;
    var analyzeForms = wisp_compiler.analyzeForms;
}
var receive = exports.receive = function receive(method, handler) {
        return self.addEventListener('message', function (event) {
            return method === event.data.method ? send(conj({
                'id': event.data.id,
                'method': event.data.method
            }, handler.apply(void 0, event.data.params))) : void 0;
        });
    };
var send = exports.send = function send(data) {
        return postMessage(JSON.parse(JSON.stringify(data)));
    };
receive('read', function (source, options) {
    return readForms(source, (options || 0)['source-uri']);
});
receive('analyze', function (source, options) {
    return function () {
        var formsø1 = readForms(source, (options || 0)['source-uri']);
        return (formsø1 || 0)['error'] ? formsø1 : analyzeForms((formsø1 || 0)['forms']);
    }.call(this);
});
receive('compile', function (source, options) {
    return compile(source, options);
});