(ns wisp.worker
  "Wisp program that reads wisp code from stdin and prints
  compiled javascript code into stdout"
  (:require [fs :refer [createReadStream]]
            [path :refer [basename dirname join resolve]]
            [module :refer [Module]]

            [wisp.string :refer [split join upper-case replace]]
            [wisp.sequence :refer [first second last count reduce rest
                                   conj partition assoc drop empty?]]

            [wisp.repl :refer [start] :rename {start start-repl}]
            [wisp.engine.node]
            [wisp.runtime :refer [str subs = nil?]]
            [wisp.ast :refer [pr-str name]]

            [wisp.compiler :refer [compile read-forms analyze-forms]]))

(defn receive! [method handler]
  (self.addEventListener
   "message"
   (fn [event]
     (if (identical? method event.data.method)
       (send! (conj {:id event.data.id
                     :method event.data.method}
                    (apply handler event.data.params)))))))

(defn send!
  [data]
  (postMessage (JSON.parse (JSON.stringify data))))


(receive!
 :read
 (fn [source options]
   (read-forms source (:source-uri options))))

(receive!
 :analyze
 (fn [source options]
   (let [forms (read-forms source (:source-uri options))]
     (if (:error forms)
       forms
       (analyze-forms (:forms forms))))))

(receive!
 :compile
 (fn [source options]
     (compile source options)))

