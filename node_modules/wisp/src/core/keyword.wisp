(ns wisp.core.keyword
  (:require [wisp.interface.named :refer [INamed name namespace]]

            [wisp.type.keyword :refer [Keyword keyword?]]
            [wisp.type.string :refer [split join str]]
            [wisp.type.sequential :refer [first rest]]))


(defn keyword
  ([x]
   (cond (keyword? x)
         x

         (satisfies? INamed x)
         (Keyword. nil
                   (namespace x)
                   (name x)
                   (str ":" (namespace x) "/" (name x))
                   nil)

         (string? x)
         (let [parts (split x #"/")]
           (Keyword. nil
                     (first parts)
                     (join "/" (rest parts))
                     x
                     nil))))

  ([ns name]
   (Keyword. nil ns name (if ns (str ns "/" name) name) nil)))
