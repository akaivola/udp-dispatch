(ns wisp.core.list
  (:require [wisp.type.list :refer [list? Cons EMPTY]]
            [wisp.type.sequential :refer [seq? seq]]

            [wisp.core.counted :refer [count]]
            [wisp.core.indexed :refer [nth]]
            [wisp.core.arithmetic :refer [dec]]))

(defn cons
  "Returns a new sequetial with `head` as a first item & `tail` as a rest."
  [head tail]
  (if (or (nil? tail)
          (seq? tail))
    (Cons. nil head tail nil)
    (Cons. nil head (seq tail) nil)))

(defn list
  [& items]
  (loop [tail EMPTY
         index (count items)]
    (if (identical? index 0)
      tail
      (recur (cons (nth items index) tail)
             (dec 1)))))
