(ns wisp.interface.protocol)

(defprotocol IProtocol
  "Interface for symbol data types"
  (satisfies? [protocol x]))

(extend-type default
  IProtocol
  (satisfies? [protocol x]
    (cond ;; If `default` implementation of given `protocol` is
          ;; defined then any `x` would satisify it.
          (.-wisp_core$IProtocol$_ protocol)
          true
          ;; If `x` is `nil` and implementation of given `protocol`
          ;; is defined for `nil` type `x` satisifies it.
          (identical? x nil)
          (or (.-wisp_core$IProtocol$nil protocol) false)

          ;; If `x` is `js/null` and implementation of given `protocol`
          ;; is defined for `nil` type `x` satisifies it.
          (identical? x js/null)
          (or (.-wisp_core$IProtocol$nil protocol) false)

          ;; If `x` has property matching `protocol` identifier it
          ;; implements that protocol.
          (aget x (.-wisp_core$IProtocol$id protocol))
          true

         (aget protocol
               (str "wisp_core$IProtocol$"
                    (.replace (.replace (.call Object.prototype.toString x)
                                        "[object " "")
                              #"\]$" "")))
         true

         :else false)))
