(ns wisp.type.number
  (:require [wisp.interface.meta :refer [IMeta IWithMeta]]
            [wisp.interface.boolean :refer [ICastBoolean]]
            [wisp.interface.number :refer [INumber number number?]]
            [wisp.interface.equal :refer [IEqual]]
            [wisp.interface.writable :refer [IWritable]]
            [wisp.interface.writer :refer [-append]]))


(deftype NumberWithMetadata
  [value metadata]
  Object
  (toString [_] (.toString value))
  (valueOf [_] value)

  INumber
  (number [_] value)

  IMeta
  (-meta [_] metadata)

  IWithMeta
  (-with-meta [_ metadata]
    (NumberWithMetadata. value metadata))

  ICastBoolean
  (->boolean [_] true)

  IWritable
  (-write [_ writer options]
    (-append writer (number value) options))

  IEqual
  (-equal [_ other]
    (or (identical? value other)
        (and (number? other)
             (identical? (number other) value)))))

(extend-type number
  INumber
  (number [value] value)

  IMeta
  (-meta [_] nil)

  IWithMeta
  (-with-meta [number metadata]
    (NumberWithMetadata. number metadata))

  ICastBoolean
  (->boolean [_] true)

  IWritable
  (-write [value writer options]
    (-append writer (.toString value) options))

  IEqual
  (-equal [value other]
    (or (identical? value other)
        (and (number? other)
             (identical? (number other) value)))))
