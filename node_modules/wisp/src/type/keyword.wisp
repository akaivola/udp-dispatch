(ns wisp.type.keyword
  (:require [wisp.interface.keyword :refer [IKeyword -keyword keyword?]]
            [wisp.interface.meta :refer [IMeta IWithMeta]]
            [wisp.interface.named :refer [INamed INamespaced]]
            [wisp.interface.equal :refer [IEqual]]
            [wisp.interface.function :refer [IFn]]
            [wisp.interface.writable :refer [IWritable]]
            [wisp.interface.lookup :refer [-lookup]]
            [wisp.interface.writer :refer [-append]]
            [wisp.interface.protocol :refer [satisfies?]]))

(defn keyword?
  "Returns `true` if `x` is a keyword"
  [x]
  (satisfies? IKeyword x))

(deftype Keyword
  [metadata ns name id hash]
  IKeyword
  (-keyword [_] id)

  Object
  (toString [_] (str ":" id))

  IMeta
  (-meta [_] metadata)

  IWithMeta
  (-with-meta [_ new-metadata]
    (Keyword. new-metadata ns name id hash))

  IWritable
  (-write [_ writer options]
    (-append writer (str ":" id) options))

  IEqual
  (-equal [_ other]
    (and (satisfies? IKeyword other)
         (identical? id (-keyword other))))

  IFn
  (-invoke [source target]
    (-lookup target source))
  (-invoke [_ target not-found]
    (-lookup target id not-found))

  INamed
  (-name [_] name)

  INamespaced
  (-namespace [_] ns))
